// Download functionality for personality test results

function downloadResults() {
  const isMobile = window.innerWidth <= 768 || /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
  
  if (isMobile) {
    showMobileDownloadOptions();
  } else {
    downloadAsPDF();
  }
}

function showMobileDownloadOptions() {
  const modal = document.createElement('div');
  modal.className = 'download-modal-overlay';
  modal.innerHTML = `
    <div class="download-modal">
      <h3>Download Options</h3>
      <p>Choose how you'd like to save your results:</p>
      <div class="download-options">
        <button class="download-option-btn" onclick="downloadFullScreenshot()">
          <span>üì±</span>
          <div>
            <strong>Full Results</strong>
            <small>Screenshot of complete results (excluding footer)</small>
          </div>
        </button>
        <button class="download-option-btn" onclick="downloadAllTraitsWithPhotos()">
          <span>üìä</span>
          <div>
            <strong>5 Individual Trait Images</strong>
            <small>Download 5 separate images, one for each trait</small>
          </div>
        </button>
      </div>
      <button class="close-modal-btn" onclick="closeMobileDownloadModal()">Cancel</button>
    </div>
  `;
  
  document.body.appendChild(modal);
  
  if (!document.getElementById('download-modal-styles')) {
    const styles = document.createElement('style');
    styles.id = 'download-modal-styles';
    styles.textContent = `
      .download-modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.8);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 10000;
        padding: 20px;
      }
      
      .download-modal {
        background: white;
        border-radius: 12px;
        padding: 24px;
        max-width: 350px;
        width: 100%;
        text-align: center;
      }
      
      .download-modal h3 {
        margin: 0 0 8px 0;
        font-size: 20px;
        font-weight: 600;
      }
      
      .download-modal p {
        margin: 0 0 20px 0;
        color: #666;
        font-size: 14px;
      }
      
      .download-options {
        display: flex;
        flex-direction: column;
        gap: 12px;
        margin-bottom: 20px;
      }
      
      .download-option-btn {
        display: flex;
        align-items: center;
        gap: 12px;
        padding: 16px;
        border: 2px solid #e5e5e5;
        border-radius: 8px;
        background: white;
        cursor: pointer;
        transition: all 0.2s;
        text-align: left;
      }
      
      .download-option-btn:hover {
        border-color: #0cc0df;
        background: #f8fffe;
      }
      
      .download-option-btn span {
        font-size: 24px;
      }
      
      .download-option-btn strong {
        display: block;
        font-size: 16px;
        margin-bottom: 2px;
      }
      
      .download-option-btn small {
        color: #666;
        font-size: 12px;
      }
      
      .close-modal-btn {
        padding: 12px 24px;
        border: 1px solid #ddd;
        border-radius: 6px;
        background: white;
        cursor: pointer;
        font-size: 14px;
      }
      
      .close-modal-btn:hover {
        background: #f5f5f5;
      }
    `;
    document.head.appendChild(styles);
  }
}

function closeMobileDownloadModal() {
  const modal = document.querySelector('.download-modal-overlay');
  if (modal) {
    modal.remove();
  }
}

async function downloadAsPDF() {
  window.showNotification('‚è≥ Generating PDF...');
  
  try {
    await loadLibraries();
    
    const { jsPDF } = window.jspdf;
    const pdf = new jsPDF('p', 'mm', 'a4');
    
    const firstName = window.state.userData?.firstName || 'there';
    const personalityCode = `${window.state.ocean.O}${window.state.ocean.C}${window.state.ocean.E}${window.state.ocean.A}${window.state.ocean.N}`;
    
    pdf.setFontSize(20);
    pdf.text(`Hi ${firstName}, your personality code is ${personalityCode}`, 20, 30);
    
    pdf.setFontSize(12);
    pdf.text('Big Five Personality Test Results', 20, 45);
    pdf.text('Generated by PSYKHE AI', 20, 55);
    pdf.text(`Date: ${new Date().toLocaleDateString()}`, 20, 65);
    
    let yPosition = 85;
    
    const traits = [
      { key: 'O', name: 'openness', label: 'Openness' },
      { key: 'C', name: 'conscientiousness', label: 'Conscientiousness' },
      { key: 'E', name: 'extroversion', label: 'Extroversion' },
      { key: 'A', name: 'agreeableness', label: 'Agreeableness' },
      { key: 'N', name: 'neuroticism', label: 'Neuroticism' }
    ];
    
    const traitContent = window.getTraitContent();
    
    for (const trait of traits) {
      const score = window.state.ocean[trait.key];
      const level = window.toHuman(score);
      
      if (yPosition > 250) {
        pdf.addPage();
        yPosition = 20;
      }
      
      pdf.setFontSize(16);
      pdf.text(`${trait.label}: ${score}/5 (${level})`, 20, yPosition);
      yPosition += 15;
      
      if (traitContent[trait.name] && traitContent[trait.name][level]) {
        pdf.setFontSize(10);
        const content = traitContent[trait.name][level];
        
        for (const paragraph of content.paragraphs) {
          const lines = pdf.splitTextToSize(paragraph, 170);
          pdf.text(lines, 20, yPosition);
          yPosition += lines.length * 5 + 5;
          
          if (yPosition > 260) {
            pdf.addPage();
            yPosition = 20;
          }
        }
      }
      
      yPosition += 10;
    }
    
    pdf.setFontSize(8);
    pdf.text('Big Five Inventory-2 Items Copyright 2015 By Drs. Oliver P. John and Christopher J. Soto.', 20, 280);
    pdf.text('Test results developed independently by PSYKHE AI.', 20, 285);
    
    pdf.save(`personality-test-results-${personalityCode}.pdf`);
    window.showNotification('‚úÖ PDF downloaded successfully!');
    
  } catch (error) {
    console.error('Error generating PDF:', error);
    window.showNotification('‚ùå Error generating PDF. Please try again.');
  }
}

async function downloadFullScreenshot() {
  closeMobileDownloadModal();
  
  try {
    await loadLibraries();
    
    const resultsSection = document.getElementById('results-section');
    const footer = document.querySelector('footer');
    const floatingButtons = document.querySelector('.floating-action-buttons');
    const bottomActionButtons = document.querySelector('.bottom-action-buttons');
    const notification = document.getElementById('download-notification');
    const traitHint = document.getElementById('trait-hint');
    
    const originalStyles = {
      footer: footer ? footer.style.display : '',
      floatingButtons: floatingButtons ? floatingButtons.style.display : '',
      bottomActionButtons: bottomActionButtons ? bottomActionButtons.style.display : '',
      notification: notification ? notification.style.display : '',
      traitHint: traitHint ? traitHint.style.display : ''
    };
    
    if (footer) footer.style.display = 'none';
    if (floatingButtons) floatingButtons.style.display = 'none';
    if (bottomActionButtons) bottomActionButtons.style.display = 'none';
    if (notification) notification.style.display = 'none';
    if (traitHint) traitHint.style.display = 'none';
    
    const currentTabIndex = window.state.activeTabIndex;
    addActiveTabOutline(currentTabIndex);
    
    await new Promise(resolve => setTimeout(resolve, 300));
    
    const canvas = await html2canvas(resultsSection, {
      useCORS: true,
      allowTaint: true,
      backgroundColor: '#ffffff',
      scale: 2,
      scrollX: 0,
      scrollY: 0,
      width: resultsSection.scrollWidth,
      height: resultsSection.scrollHeight,
      y: 20,
      logging: false
    });
    
    removeActiveTabOutline();
    
    if (footer) footer.style.display = originalStyles.footer;
    if (floatingButtons) floatingButtons.style.display = originalStyles.floatingButtons;
    if (bottomActionButtons) bottomActionButtons.style.display = originalStyles.bottomActionButtons;
    if (notification) notification.style.display = originalStyles.notification;
    if (traitHint) traitHint.style.display = originalStyles.traitHint;
    
    downloadCanvas(canvas, 'personality-test-full-results.png');
    window.showNotification('‚úÖ Full screenshot saved!');
    
  } catch (error) {
    console.error('Error capturing full screenshot:', error);
    window.showNotification('‚ùå Error capturing screenshot. Please try again.');
    
    const footer = document.querySelector('footer');
    const floatingButtons = document.querySelector('.floating-action-buttons');
    const bottomActionButtons = document.querySelector('.bottom-action-buttons');
    const notification = document.getElementById('download-notification');
    const traitHint = document.getElementById('trait-hint');
    
    if (footer) footer.style.display = '';
    if (floatingButtons) floatingButtons.style.display = '';
    if (bottomActionButtons) bottomActionButtons.style.display = '';
    if (notification) notification.style.display = '';
    if (traitHint) traitHint.style.display = '';
    removeActiveTabOutline();
  }
}

async function downloadAllTraitsWithPhotos() {
  closeMobileDownloadModal();
  
  try {
    await loadLibraries();
    
    showProgressSpinner();
    
    const footer = document.querySelector('footer');
    const floatingButtons = document.querySelector('.floating-action-buttons');
    const bottomActionButtons = document.querySelector('.bottom-action-buttons');
    const notification = document.getElementById('download-notification');
    const traitHint = document.getElementById('trait-hint');
    
    const originalStyles = {
      footer: footer ? footer.style.display : '',
      floatingButtons: floatingButtons ? floatingButtons.style.display : '',
      bottomActionButtons: bottomActionButtons ? bottomActionButtons.style.display : '',
      notification: notification ? notification.style.display : '',
      traitHint: traitHint ? traitHint.style.display : ''
    };
    
    if (footer) footer.style.display = 'none';
    if (floatingButtons) floatingButtons.style.display = 'none';
    if (bottomActionButtons) bottomActionButtons.style.display = 'none';
    if (notification) notification.style.display = 'none';
    if (traitHint) traitHint.style.display = 'none';
    
    await downloadIndividualTraitScreenshots();
    
    hideProgressSpinner();
    
    if (footer) footer.style.display = originalStyles.footer;
    if (floatingButtons) floatingButtons.style.display = originalStyles.floatingButtons;
    if (bottomActionButtons) bottomActionButtons.style.display = originalStyles.bottomActionButtons;
    if (notification) notification.style.display = originalStyles.notification;
    if (traitHint) traitHint.style.display = originalStyles.traitHint;
    
    window.showNotification('‚úÖ All 5 trait images downloaded!');
    
  } catch (error) {
    console.error('Error generating all traits screenshots:', error);
    
    hideProgressSpinner();
    
    window.showNotification('‚ùå Error generating screenshots. Please try again.');
    
    const footer = document.querySelector('footer');
    const floatingButtons = document.querySelector('.floating-action-buttons');
    const bottomActionButtons = document.querySelector('.bottom-action-buttons');
    const notification = document.getElementById('download-notification');
    const traitHint = document.getElementById('trait-hint');
    
    if (footer) footer.style.display = '';
    if (floatingButtons) floatingButtons.style.display = '';
    if (bottomActionButtons) bottomActionButtons.style.display = '';
    if (notification) notification.style.display = '';
    if (traitHint) traitHint.style.display = '';
  }
}

async function downloadIndividualTraitScreenshots() {
  const traits = [
    { key: 'O', name: 'openness', label: 'Openness' },
    { key: 'C', name: 'conscientiousness', label: 'Conscientiousness' },
    { key: 'E', name: 'extroversion', label: 'Extroversion' },
    { key: 'A', name: 'agreeableness', label: 'Agreeableness' },
    { key: 'N', name: 'neuroticism', label: 'Neuroticism' }
  ];
  
  const originalTabIndex = window.state.activeTabIndex;
  const firstName = window.state.userData?.firstName || 'User';
  
  for (let i = 0; i < traits.length; i++) {
    const trait = traits[i];
    
    updateSpinnerProgress(i + 1, traits.length, trait.label);
    
    await switchToTraitAndWait(i);
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    addActiveTabOutline(i);
    
    const spinner = document.getElementById('progress-spinner');
    const spinnerDisplay = spinner ? spinner.style.display : '';
    if (spinner) spinner.style.display = 'none';
    
    await new Promise(resolve => setTimeout(resolve, 200));
    
    const resultsSection = document.getElementById('results-section');
    const canvas = await html2canvas(resultsSection, {
      useCORS: true,
      allowTaint: true,
      backgroundColor: '#ffffff',
      scale: 2,
      scrollX: 0,
      scrollY: 0,
      width: resultsSection.scrollWidth,
      height: resultsSection.scrollHeight,
      y: 20,
      logging: false
    });
    
    if (spinner) spinner.style.display = spinnerDisplay;
    
    removeActiveTabOutline();
    
    const score = window.state.ocean[trait.key];
    const level = window.toHuman(score);
    const filename = `${firstName}-${trait.label}-${score}-${level}.png`;
    
    downloadCanvas(canvas, filename);
    
    await new Promise(resolve => setTimeout(resolve, 500));
  }
  
  await switchToTraitAndWait(originalTabIndex);
}

async function switchToTraitAndWait(tabIndex) {
  const traits = [
    { key: 'O', name: 'openness', label: 'Openness' },
    { key: 'C', name: 'conscientiousness', label: 'Conscientiousness' },
    { key: 'E', name: 'extroversion', label: 'Extroversion' },
    { key: 'A', name: 'agreeableness', label: 'Agreeableness' },
    { key: 'N', name: 'neuroticism', label: 'Neuroticism' }
  ];
  
  const trait = traits[tabIndex];
  
  if (window.changeTab) {
    window.changeTab(tabIndex);
  }
  
  const tabElements = document.querySelectorAll('.nav-link');
  if (tabElements[tabIndex]) {
    tabElements[tabIndex].click();
  }
  
  window.state.activeTabIndex = tabIndex;
  
  if (window.updateDesktopTabs) {
    window.updateDesktopTabs();
  }
  if (window.updateCurrentTraitDisplay) {
    window.updateCurrentTraitDisplay();
  }
  
  await new Promise(resolve => setTimeout(resolve, 500));
  
  await forceCompleteTraitUpdate(tabIndex, trait);
  
  await new Promise(resolve => setTimeout(resolve, 300));
}

async function forceCompleteTraitUpdate(tabIndex, trait) {
  window.state.activeTabIndex = tabIndex;
  
  const score = window.state.ocean[trait.key];
  const level = window.toHuman(score);
  
  const photoElement = document.getElementById('result-photo');
  const photoLabel = document.getElementById('photo-label');
  
  if (photoElement) {
    const photoPath = `/media/b2c/personality-test/${trait.name}/${level}.jpg`;
    photoElement.src = photoPath;
    await new Promise((resolve) => {
      if (photoElement.complete) {
        resolve();
      } else {
        photoElement.onload = resolve;
        photoElement.onerror = resolve;
      }
    });
  }
  
  if (photoLabel) {
    photoLabel.textContent = `${trait.name.toUpperCase()} ${score}`;
  }
  
  const tabElements = document.querySelectorAll('.nav-link');
  tabElements.forEach((tab, index) => {
    if (index === tabIndex) {
      tab.classList.add('active');
    } else {
      tab.classList.remove('active');
    }
  });
  
  const traitContent = window.getTraitContent();
  const desktopTraitContent = document.getElementById('desktop-trait-content');
  
  if (desktopTraitContent && traitContent[trait.name] && traitContent[trait.name][level]) {
    const content = traitContent[trait.name][level];
    desktopTraitContent.innerHTML = `
      <div class="profile-trait-section">
        <div class="tab-pane show profile-tab active" role="tabpanel">
          <div class="flex flex-wrap -mx-4">
            <div class="w-full px-4">
              <h3 class="mob-hide-sm trait-title">You scored ${level} on ${trait.name}</h3>
              ${content.paragraphs.map(p => `<p>${p}</p>`).join('')}
            </div>
          </div>
        </div>
        <hr class="border-t border-gray-300 my-4" />
        <div class="legend">
          <span>HIGH = 5</span>
          <span>MODERATE-HIGH = 4</span>
          <span>MODERATE = 3</span>
          <span>MODERATE-LOW = 2</span>
          <span>LOW = 1</span>
        </div>
      </div>
    `;
  }
  
  const mobileTraitContent = document.getElementById('mobile-trait-content');
  const mobileTraitHeader = document.getElementById('mobile-trait-header');
  
  if (mobileTraitContent && traitContent[trait.name] && traitContent[trait.name][level]) {
    const content = traitContent[trait.name][level];
    mobileTraitContent.innerHTML = `
      <div class="profile-trait-section">
        ${content.paragraphs.map(p => `<p>${p}</p>`).join('')}
        <hr class="border-t border-gray-300 my-4" />
        <div class="legend">
          <span>HIGH = 5</span>
          <span>MODERATE-HIGH = 4</span>
          <span>MODERATE = 3</span>
          <span>MODERATE-LOW = 2</span>
          <span>LOW = 1</span>
        </div>
      </div>
    `;
  }
  
  if (mobileTraitHeader) {
    mobileTraitHeader.textContent = `${trait.name.toUpperCase()}: ${score}`;
  }
  
  document.body.offsetHeight;
  
  await new Promise(resolve => setTimeout(resolve, 200));
}

function addActiveTabOutline(activeIndex) {
  removeActiveTabOutline();
  
  const tabElements = document.querySelectorAll('.nav-link');
  if (tabElements[activeIndex]) {
    tabElements[activeIndex].style.border = '3px solid white';
    tabElements[activeIndex].style.borderRadius = '8px';
    tabElements[activeIndex].style.boxShadow = '0 0 10px rgba(255, 255, 255, 0.8)';
  }
  
  const mobileTraitBars = document.querySelectorAll('.trait-bar');
  if (mobileTraitBars[activeIndex]) {
    mobileTraitBars[activeIndex].style.border = '3px solid white';
    mobileTraitBars[activeIndex].style.borderRadius = '8px';
    mobileTraitBars[activeIndex].style.boxShadow = '0 0 10px rgba(255, 255, 255, 0.8)';
  }
}

function removeActiveTabOutline() {
  const tabElements = document.querySelectorAll('.nav-link');
  tabElements.forEach(tab => {
    tab.style.border = '';
    tab.style.borderRadius = '';
    tab.style.boxShadow = '';
  });
  
  const mobileTraitBars = document.querySelectorAll('.trait-bar');
  mobileTraitBars.forEach(bar => {
    bar.style.border = '';
    bar.style.borderRadius = '';
    bar.style.boxShadow = '';
  });
}

async function forceUpdateTraitDisplay(tabIndex, trait) {
  window.state.activeTabIndex = tabIndex;
  
  const score = window.state.ocean[trait.key];
  const level = window.toHuman(score);
  
  
  const photoElement = document.getElementById('result-photo');
  const photoLabel = document.getElementById('photo-label');
  
  if (photoElement) {
    const photoPath = `/media/b2c/personality-test/${trait.name}/${level}.jpg`;
    photoElement.src = photoPath;
  }
  
  if (photoLabel) {
    photoLabel.textContent = `${trait.name.toUpperCase()} ${score}`;
  }
  
  if (window.updateDesktopTabs) {
    window.updateDesktopTabs();
  }
  
  const traitContent = window.getTraitContent();
  const desktopTraitContent = document.getElementById('desktop-trait-content');
  
  if (desktopTraitContent && traitContent[trait.name] && traitContent[trait.name][level]) {
    const content = traitContent[trait.name][level];
    desktopTraitContent.innerHTML = `
      <div class="profile-trait-section">
        <div class="tab-pane show profile-tab active" role="tabpanel">
          <div class="flex flex-wrap -mx-4">
            <div class="w-full px-4">
              <h3 class="mob-hide-sm trait-title">You scored ${level} on ${trait.name}</h3>
              ${content.paragraphs.map(p => `<p>${p}</p>`).join('')}
            </div>
          </div>
        </div>
        <hr class="border-t border-gray-300 my-4" />
        <div class="legend">
          <span>HIGH = 5</span>
          <span>MODERATE-HIGH = 4</span>
          <span>MODERATE = 3</span>
          <span>MODERATE-LOW = 2</span>
          <span>LOW = 1</span>
        </div>
      </div>
    `;
  }
  
  await new Promise(resolve => setTimeout(resolve, 100));
}

async function createAllTraitsImageWithPhotos() {
  const canvas = document.createElement('canvas');
  const ctx = canvas.getContext('2d');
  
  canvas.width = 800;
  canvas.height = 1800;
  
  ctx.fillStyle = '#ffffff';
  ctx.fillRect(0, 0, canvas.width, canvas.height);
  
  ctx.fillStyle = '#000000';
  ctx.font = 'bold 24px Arial';
  ctx.textAlign = 'center';
  
  const firstName = window.state.userData?.firstName || 'there';
  const personalityCode = `${window.state.ocean.O}${window.state.ocean.C}${window.state.ocean.E}${window.state.ocean.A}${window.state.ocean.N}`;
  
  ctx.fillText(`Hi ${firstName}!`, canvas.width / 2, 50);
  ctx.fillText(`Your personality code is ${personalityCode}`, canvas.width / 2, 80);
  
  const traits = [
    { key: 'O', name: 'openness', label: 'OPENNESS' },
    { key: 'C', name: 'conscientiousness', label: 'CONSCIENTIOUSNESS' },
    { key: 'E', name: 'extroversion', label: 'EXTROVERSION' },
    { key: 'A', name: 'agreeableness', label: 'AGREEABLENESS' },
    { key: 'N', name: 'neuroticism', label: 'NEUROTICISM' }
  ];
  
  let yPos = 120;
  
  for (let i = 0; i < traits.length; i++) {
    const trait = traits[i];
    const score = window.state.ocean[trait.key];
    const level = window.toHuman(score);
    
    try {
      const photoPath = `/media/b2c/personality-test/${trait.name}/${level}.jpg`;
      const img = await loadImage(photoPath);
      
      const photoSize = 120;
      const photoX = 50;
      ctx.drawImage(img, photoX, yPos, photoSize, photoSize);
      
      ctx.font = 'bold 18px Arial';
      ctx.textAlign = 'left';
      ctx.fillStyle = '#000000';
      ctx.fillText(`${trait.label}`, photoX + photoSize + 20, yPos + 30);
      ctx.fillText(`Score: ${score}/5 (${level.toUpperCase()})`, photoX + photoSize + 20, yPos + 55);
      
      const barWidth = 200;
      const barHeight = 15;
      const barX = photoX + photoSize + 20;
      const barY = yPos + 70;
      
      ctx.fillStyle = '#e5e5e5';
      ctx.fillRect(barX, barY, barWidth, barHeight);
      
      const progress = (score / 5) * barWidth;
      const gradient = ctx.createLinearGradient(barX, barY, barX + progress, barY);
      gradient.addColorStop(0, '#0cc0df');
      gradient.addColorStop(1, '#ffde59');
      ctx.fillStyle = gradient;
      ctx.fillRect(barX, barY, progress, barHeight);
      
    } catch (error) {
      
      ctx.fillStyle = '#f0f0f0';
      ctx.fillRect(50, yPos, 120, 120);
      ctx.fillStyle = '#666';
      ctx.font = '12px Arial';
      ctx.textAlign = 'center';
      ctx.fillText('Photo', 110, yPos + 65);
      

      ctx.font = 'bold 18px Arial';
      ctx.textAlign = 'left';
      ctx.fillStyle = '#000000';
      ctx.fillText(`${trait.label}: ${score}/5`, 190, yPos + 40);
    }
    
    yPos += 160; 
  }
  

  ctx.font = '12px Arial';
  ctx.fillStyle = '#666666';
  ctx.textAlign = 'center';
  yPos += 20;
  ctx.fillText('HIGH = 5 ‚Ä¢ MODERATE-HIGH = 4 ‚Ä¢ MODERATE = 3 ‚Ä¢ MODERATE-LOW = 2 ‚Ä¢ LOW = 1', canvas.width / 2, yPos);
  

  ctx.font = '10px Arial';
  ctx.fillText('Generated by PSYKHE AI', canvas.width / 2, canvas.height - 40);
  ctx.fillText(`Date: ${new Date().toLocaleDateString()}`, canvas.width / 2, canvas.height - 25);
  
  return canvas;
}


function loadImage(src) {
  return new Promise((resolve, reject) => {
    const img = new Image();
    img.crossOrigin = 'anonymous';
    img.onload = () => resolve(img);
    img.onerror = reject;
    img.src = src;
  });
}

async function loadLibraries() {
  if (!window.jspdf) {
    await loadScript('https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js');
  }
  
  if (!window.html2canvas) {
    await loadScript('https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js');
  }
}

function loadScript(src) {
  return new Promise((resolve, reject) => {
    const script = document.createElement('script');
    script.src = src;
    script.onload = resolve;
    script.onerror = reject;
    document.head.appendChild(script);
  });
}

function downloadCanvas(canvas, filename) {
  const link = document.createElement('a');
  link.download = filename;
  link.href = canvas.toDataURL();
  link.click();
}

function showProgressSpinner() {

  let spinner = document.getElementById('progress-spinner');
  if (!spinner) {
    spinner = document.createElement('div');
    spinner.id = 'progress-spinner';
    spinner.innerHTML = `
      <div class="spinner-overlay">
        <div class="spinner-container">
          <div class="spinner-circle"></div>
          <div class="spinner-text">
            <div class="spinner-title">Generating Images...</div>
            <div class="spinner-progress" id="spinner-progress">Preparing...</div>
          </div>
        </div>
      </div>
    `;
    

    const styles = document.createElement('style');
    styles.textContent = `
      #progress-spinner {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        z-index: 9999;
        pointer-events: none;
      }
      
      .spinner-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.3);
        display: flex;
        align-items: center;
        justify-content: center;
      }
      
      .spinner-container {
        background: white;
        border-radius: 15px;
        padding: 30px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
        display: flex;
        align-items: center;
        gap: 20px;
        min-width: 300px;
      }
      
      .spinner-circle {
        width: 40px;
        height: 40px;
        border: 4px solid #f3f3f3;
        border-top: 4px solid #0cc0df;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        flex-shrink: 0;
      }
      
      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }
      
      .spinner-text {
        flex: 1;
      }
      
      .spinner-title {
        font-size: 18px;
        font-weight: 600;
        color: #333;
        margin-bottom: 5px;
      }
      
      .spinner-progress {
        font-size: 14px;
        color: #666;
      }
    `;
    
    document.head.appendChild(styles);
    document.body.appendChild(spinner);
  }
  
  spinner.style.display = 'block';
}

function updateSpinnerProgress(current, total, traitName) {
  const progressElement = document.getElementById('spinner-progress');
  if (progressElement) {
    progressElement.textContent = `Processing ${traitName}... (${current}/${total})`;
  }
}

function hideProgressSpinner() {
  const spinner = document.getElementById('progress-spinner');
  if (spinner) {
    spinner.style.display = 'none';
  }
}


window.downloadResults = downloadResults;
window.showMobileDownloadOptions = showMobileDownloadOptions;
window.closeMobileDownloadModal = closeMobileDownloadModal;
window.downloadFullScreenshot = downloadFullScreenshot;
window.downloadAllTraitsWithPhotos = downloadAllTraitsWithPhotos;