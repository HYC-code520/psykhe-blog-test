---
export interface Props {
  baseValue?: number;
  incrementRate?: number;
  updateInterval?: number;
  label?: string;
}

const {
  baseValue = 230000,
  incrementRate = 1,
  updateInterval = 10000,
  label = "TESTS TAKEN",
} = Astro.props;

const componentId = `flip-counter-${Math.random().toString(36).substr(2, 9)}`;
---

<div
  class="flip-counter"
  data-base-value={baseValue}
  data-increment-rate={incrementRate}
  data-update-interval={updateInterval}
  data-component-id={componentId}
>
  <div class="counter-label">{label}</div>
  <div class="counter-display" id={`${componentId}-display`}>
    <!-- Digits will be generated by JavaScript -->
  </div>
</div>

<script>
  class FlipCounter {
    element: HTMLElement;
    componentId: string | undefined;
    baseValue: number;
    incrementRate: number;
    updateInterval: number;
    currentValue: number;
    display: Element | null;
    counterInterval: ReturnType<typeof setInterval> | null;

    constructor(element: HTMLElement) {
      this.element = element;
      this.componentId = element.dataset.componentId;
      this.baseValue = parseInt(element.dataset.baseValue ?? "230000");
      this.incrementRate = parseInt(element.dataset.incrementRate ?? "1");
      this.updateInterval = parseInt(element.dataset.updateInterval ?? "10000");
      this.currentValue = this.calculateTimeBasedValue();
      this.display = element.querySelector(`#${this.componentId}-display`);
      this.counterInterval = null;

      this.init();
    }

    calculateTimeBasedValue() {
      const now = new Date();
      const startOfYear = new Date(now.getFullYear(), 0, 1, 0, 0, 0, 0);
      const diffMs = now.getTime() - startOfYear.getTime();
      const minutes = Math.floor(diffMs / 60000);

      const timeBasedIncrement = Math.floor(minutes / 15);
      return this.baseValue + timeBasedIncrement;
    }

    init() {
      this.updateDisplay();
      this.startCounter();
    }

    get displayDigits() {
      return String(this.currentValue).padStart(6, "0").split("");
    }

    updateDisplay() {
      if (!this.display) return;

      this.display.innerHTML = "";

      this.displayDigits.forEach((digit, index) => {
        const container = document.createElement("div");
        container.className = "digit-container";

        const pivot = document.createElement("div");
        pivot.className = "pivot";

        const digitElement = document.createElement("div");
        digitElement.className = "digit";
        digitElement.textContent = digit;
        digitElement.setAttribute("data-digit", digit);

        container.appendChild(pivot);
        container.appendChild(digitElement);
        this.display!.appendChild(container);
      });
    }

    animateDigitChange(container: Element, newDigit: string) {
      const currentDigit = container.querySelector(".digit");

      const newDigitElement = document.createElement("div");
      newDigitElement.className = "digit flip-enter";
      newDigitElement.textContent = newDigit;
      newDigitElement.setAttribute("data-digit", newDigit);

      container.appendChild(newDigitElement);

      currentDigit?.classList.add("flip-leave-to");

      requestAnimationFrame(() => {
        newDigitElement.classList.remove("flip-enter");

        setTimeout(() => {
          if (currentDigit?.parentNode) {
            currentDigit.parentNode.removeChild(currentDigit);
          }
        }, 400);
      });
    }

    updateValue() {
      const newTimeBasedValue = this.calculateTimeBasedValue();

      if (newTimeBasedValue > this.currentValue) {
        const oldDigits = this.displayDigits;
        this.currentValue = newTimeBasedValue;
        const newDigits = this.displayDigits;

        const containers = this.display?.querySelectorAll(".digit-container");

        newDigits.forEach((digit, index) => {
          if (oldDigits[index] !== digit && containers?.[index]) {
            this.animateDigitChange(containers[index], digit);
          }
        });
      }
    }

    startCounter() {
      this.counterInterval = setInterval(() => {
        this.updateValue();
      }, this.updateInterval);
    }

    destroy() {
      if (this.counterInterval) {
        clearInterval(this.counterInterval);
      }
    }
  }

  document.addEventListener("DOMContentLoaded", () => {
    const flipCounters = document.querySelectorAll(".flip-counter");
    flipCounters.forEach((element) => {
      new FlipCounter(element as HTMLElement);
    });
  });

  window.addEventListener("beforeunload", () => {});
</script>
